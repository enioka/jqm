/**
 * Copyright Â© 2013 enioka. All rights reserved
 * Authors: Marc-Antoine GOUILLART (marc-antoine.gouillart@enioka.com)
 *          Pierre COPPEE (pierre.coppee@enioka.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.enioka.jqm.model;

import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.bind.annotation.XmlRootElement;

import com.enioka.jqm.jdbc.DatabaseException;
import com.enioka.jqm.jdbc.DbConn;
import com.enioka.jqm.jdbc.NoResultException;
import com.enioka.jqm.jdbc.QueryResult;

/**
 * <strong>Not part of any API - this an internal JQM class and may change without notice.</strong> <br>
 * Persistence class for storing parameters related to the whole JQM cluster (parameters related to a single engine are stored inside
 * {@link Node}).<br>
 * Parameters are simple key/value string pairs.
 */
@XmlRootElement
public class GlobalParameter implements Serializable
{
    private static final long serialVersionUID = 2619971486012565203L;

    private Integer id;
    private String key;
    private String value;
    private Calendar lastModified;

    /**
     * The key (name) of the parameter. Most parameter keys are unique, but not all so there is no unique constraint inside the database.
     * This is the field used for retrieving {@link GlobalParameter}s.<br>
     * Max length is 50.
     */
    public String getKey()
    {
        return key;
    }

    /**
     * See {@link #getKey()}
     */
    public void setKey(String key)
    {
        this.key = key;
    }

    /**
     * Value of the parameter. Its interpretation depends on the key.<br>
     * Max length is 1000.
     */
    public String getValue()
    {
        return value;
    }

    /**
     * See {@link #getValue()}
     */
    public void setValue(String value)
    {
        this.value = value;
    }

    /**
     * A technical ID without any meaning. Generated by the database.
     */
    public Integer getId()
    {
        return id;
    }

    public void setId(Integer id) { this.id = id; }

    /**
     * When the object was last modified. Read only.
     */
    public Calendar getLastModified()
    {
        return lastModified;
    }

    /**
     * See {@link #getLastModified()}
     */
    protected void setLastModified(Calendar lastModified)
    {
        this.lastModified = lastModified;
    }

    /**
     * Update or insert current object by dumping this to DB.
     */
    public void upsert(DbConn cnx)
    {
        if (this.getKey() == null || this.getKey().isEmpty() || this.getValue() == null || this.getValue().isEmpty())
        {
            throw new IllegalArgumentException("invalid object");
        }
        if (this.getId() == null)
        {
            GlobalParameter.setParameter(cnx, this.getKey(), this.getValue());
        }
        else
        {
            QueryResult qr = cnx.runUpdate("globalprm_update_key_value_by_id", this.getKey(), this.getValue(), this.getId());
            if (qr.nbUpdated == 0)
            {
                cnx.setRollbackOnly();
                throw new NoResultException("no item with ID " + this.getId());
            }
        }
    }

    /**
     * Get GlobalParameter by id from DB and fill object.
     */
    public void getById(DbConn cnx, Integer id)
    {
        this.getBy(cnx, "globalprm_select_by_id", id);
    }

    /**
     * Get GlobalParameter by key name from DB and fill object.
     */
    public void getByKey(DbConn cnx, String key)
    {
        this.getBy(cnx,"globalprm_select_by_key", key);
    }

    private void getBy(DbConn cnx, String query, Object arg)
    {
        try
        {
            ResultSet rs = cnx.runSelect(query, arg);
            if (rs.next())
            {
                this.id = rs.getInt(1);
                this.key = rs.getString(2);
                this.value = rs.getString(3);
                Calendar c = Calendar.getInstance();
                c.setTimeInMillis(rs.getTimestamp(4).getTime());
                this.lastModified = c;
            }
            else
            {
                throw new NoResultException("no item with " + arg);
            }
        }
        catch (SQLException e)
        {
            throw new DatabaseException(e);
        }
   }

    /**
     * Create a new GP entry in the database. No commit performed.
     */
    public static GlobalParameter create(DbConn cnx, String key, String value)
    {
        QueryResult r = cnx.runUpdate("globalprm_insert", key, value);
        GlobalParameter res = new GlobalParameter();
        res.id = r.getGeneratedId();
        res.key = key;
        res.value = value;
        return res;
    }

    /**
     * Retrieve a list containing all GlobalParameters
     */
    public static List<GlobalParameter> selectAll(DbConn cnx)
    {
        return GlobalParameter.select(cnx, "globalprm_select_all");
    }

    /**
     * Retrieve a list of GlobalParamter
     */
    private static List<GlobalParameter> select(DbConn cnx, String query_key, Object... args)
    {
        List<GlobalParameter> res = new ArrayList<>();
        try
        {
            ResultSet rs = cnx.runSelect(query_key, args);
            while (rs.next())
            {
                GlobalParameter tmp = new GlobalParameter();
                tmp.id = rs.getInt(1);
                tmp.key = rs.getString(2);
                tmp.value = rs.getString(3);
                Calendar c = Calendar.getInstance();
                c.setTimeInMillis(rs.getTimestamp(4).getTime());
                tmp.lastModified = c;

                res.add(tmp);
            }
        }
        catch (SQLException e)
        {
            throw new DatabaseException(e);
        }
        return res;
    }

    /**
     * Retrieve a GlobalParamter object by its id.
     */
    public static GlobalParameter getParameter(DbConn cnx, Integer id)
    {
        GlobalParameter res = new GlobalParameter();
        res.getById(cnx, id);
        return res;
    }

    /**
     * Retrieve the value of a single-valued parameter.
     */
    public static String getParameter(DbConn cnx, String key, String defaultValue)
    {
        try
        {
            return cnx.runSelectSingle("globalprm_select_by_key", 3, String.class, key);
        }
        catch (NoResultException e)
        {
            return defaultValue;
        }
    }

    /**
     * Update a parameter's vaue associated with the keyname given in parameter.
     * If not exists, insert a new parameter.
     */
    public static void setParameter(DbConn cnx, String key, String value)
    {
        QueryResult qr = cnx.runUpdate("globalprm_update_value_by_key", value, key);
        if (qr.nbUpdated == 0)
        {
            create(cnx, key, value);
        }
    }

    /**
     * Delete a parameter from DB by its id
     */
    public static void deleteGlobalParameter(DbConn cnx, int id)
    {
        QueryResult qr = cnx.runUpdate("globalprm_delete_by_id", id);
        if (qr.nbUpdated != 1)
        {
            cnx.setRollbackOnly();
            throw new NoResultException("no item with ID " + id);
        }
    }

}
